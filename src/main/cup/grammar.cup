/**
 *  This code is part of the lab exercises for the Compilers course
 *  at Harokopio University of Athens, Dept. of Informatics and Telematics.
 */

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ast.specifics.*;
import ast.interfaces.*;

parser code
{:
    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info){
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception{
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};

terminal java.lang.String IDENTIFIER;       // name
terminal MISSING_KEYWORD;
terminal ASSIGN,COMA,AND,OR,MOD,NOT,LBRAC,RBRAC;
terminal LPAREN, RPAREN,LCURLY,RCURLY, SEMICOLON;
terminal TIMES, DIVISION;
terminal PLUS, MINUS, UMINUS;
terminal LESS_THAN,GREATER_THAN,GREATER_OR_EQUAL,LESS_OR_EQUAL;
terminal EQUAL,NOT_EQUAL;
terminal INT_KEYWORD,FLOAT_KEYWORD,CHAR_KEYWORD,WHILE_KEYWORD,IF_KEYWORD,ELSE_KEYWORD,STRING_KEYWORD;
terminal RETURN_KEYWORD , BREAK_KEYWORD , CONTINUE_KEYWORD , NEW_KEYWORD , DELETE_KEYWORD;
terminal VOID_KEYWORD , PRINT_KEYWORD;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Float  FLOAT_LITERAL;
terminal java.lang.String  STRING_LITERAL;
terminal java.lang.Char    CHARACTER_LITERAL;

non terminal Expr;
non terminal List<Expression> ExprList;
non terminal Statement;
non terminal List<Statement> StmtList;
non terminal CompilationUnit;
non terminal FunctionDefinition;
non terminal VariableDefinition;
non terminal TypeSpecifier;
non terminal ParameterDeclaration;
non terminal CurlyStmt;
non terminal List<ParameterDeclaration> ParameterList;
non terminal FunVarList;


precedence left EQUAL,NOT_EQUAL;
precedence left LESS_THAN,LESS_OR_EQUAL,GREATER_OR_EQUAL,GREATER_THAN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION,MOD,NOT,AND,OR;
precedence right UMINUS;
precedence right ASSIGN;
start with CompilationUnit;

CompilationUnit ::= /* empty */
             {:
                 RESULT = new CompUnit();
                 RESULT.setLine(0);
                 RESULT.setColumn(0);
             :}
            |FunVarList:fvl{:
                RESULT = new CompUnit(fvl);
                 RESULT.setLine(0);
                 RESULT.setColumn(0);

            :} ;

FunVarList ::= VariableDefinition:vd {:
                RESULT = new FunVarList(null,vd,null);
                RESULT.setLine(vdleft);
                RESULT.setColumn(vdright);
            :}
           | FunVarList:fvl VariableDefinition:vd{:
                RESULT = new FunVarList(fvl,vd,null);
                RESULT.setLine(fvlleft);
                RESULT.setColumn(fvlright);
            :}
           | FunctionDefinition:fd{:
                RESULT = new FunVarList(null,null,fd);
                RESULT.setLine(fdleft);
                RESULT.setColumn(fdright);
            :}
           | FunVarList:fvl FunctionDefinition:fd{:
                RESULT = new FunVarList(fvl,null,fd);
                RESULT.setLine(fvlleft);
                RESULT.setColumn(fvlright);
            :}
           ;               


FunctionDefinition ::= TypeSpecifier:ts IDENTIFIER:iden LPAREN  RPAREN LCURLY StmtList:sl RCURLY{:
                RESULT = new FunctionDefinition(ts,iden,sl,null);
                RESULT.setLine(tsleft);
                RESULT.setColumn(slright);
            :}
    | TypeSpecifier:ts IDENTIFIER:iden LPAREN ParameterList:pl RPAREN LCURLY StmtList:sl RCURLY{:
                RESULT = new FunctionDefinition(ts,iden,sl,pl);
                RESULT.setLine(tsleft);
                RESULT.setColumn(slright);
            :}
            ;

ParameterList ::= ParameterDeclaration:pd{:
        RESULT = new ArrayList<ParameterDeclaration>();
        RESULT.add(pd);    
    :}
    | ParameterList:pl COMA ParameterDeclaration:pd{:
        pl.add(pd);
        RESULT = pl;
    :}
    ;

 ParameterDeclaration  ::= TypeSpecifier:ts IDENTIFIER:iden{:
        RESULT = new ParameterDeclaration(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    :}
    |  TypeSpecifier:ts LBRAC RBRAC IDENTIFIER:iden{:
        RESULT = new ParameterDeclaration(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    :} 
    ;
 TypeSpecifier  ::= CHAR_KEYWORD:kw{:
        RESULT = new TypeSpecifier("char");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     :}
    | INT_KEYWORD:kw{:
        RESULT = new TypeSpecifier("int");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     :}
    | FLOAT_KEYWORD:kw{:
        RESULT = new TypeSpecifier("float");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     :}
    | VOID_KEYWORD:kw{:
        RESULT = new TypeSpecifier("void");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     :}
    | STRING_KEYWORD:kw{:
        RESULT = new TypeSpecifier("String");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     :}
    ;
 VariableDefinition  ::=  TypeSpecifier:ts IDENTIFIER:iden  SEMICOLON{:
        RESULT = new VariableDefinition(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    :}
    |  TypeSpecifier  LBRAC RBRAC IDENTIFIER  SEMICOLON{:
        RESULT = new VariableDefinition(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    :}
    ;
 StmtList ::= Statement:s
             {:
                 RESULT = new ArrayList<Statement>();
                 RESULT.add(s);
             :}
           | StmtList:sl Statement:s
             {:
                 sl.add(s);
                 RESULT = sl;
             :}
           ;
              
 CurlyStmt ::= LCURLY StmtList:s RCURLY 
                {:
                 RESULT = new CurlyStatement(s);
                 RESULT.setLine(sleft);
                 RESULT.setColumn(sright);
                :}
    ;
 Statement ::= PRINT_KEYWORD:p LPAREN Expr:e RPAREN SEMICOLON
         {:
             RESULT = new PrintStatement(e);
             RESULT.setLine(pleft);
             RESULT.setColumn(pright);
         :}
       | IDENTIFIER:id EQUAL Expr:e SEMICOLON
         {:
             RESULT = new AssignmentStatement(id, e);
             RESULT.setLine(idleft);
             RESULT.setColumn(idright);
         :}
       | WHILE_KEYWORD:w LPAREN Expr:e RPAREN CurlyStmt:c 
         {:
            RESULT = new WhileStatement(e,c);
            RESULT.setLine(wleft);
            RESULT.setColumn(wright);
         :}
       | LBRAC:lb Statement:sl RBRAC
         {:
             RESULT = new CompoundStatement(sl);
             RESULT.setLine(lbleft);
             RESULT.setColumn(lbright);
         :}
       | LBRAC:lb RBRAC
         {:
             RESULT = new CompoundStatement();
             RESULT.setLine(lbleft);
             RESULT.setColumn(lbright);
         :}
        |IF_KEYWORD:ifs LPAREN Expr:e RPAREN CurlyStmt:c 
        {:
             RESULT = new IfStatement(e,c);
             RESULT.setLine(ifsleft);
             RESULT.setColumn(ifsright);
        :}
      |IF_KEYWORD:ifs LPAREN Expr:e RPAREN CurlyStmt:c1  ELSE_KEYWORD CurlyStmt:c2 
        {:
             RESULT = new IfThenElseStatement(e,c1,c2);
             RESULT.setLine(ifsleft);
             RESULT.setColumn(ifsright);
        :}
      |BREAK_KEYWORD:b SEMICOLON
        {:
            RESULT = new KeywordLiteral(b);
            RESULT.setLine(bleft);
            RESULT.setColumn(bright);
        :}
      
      |RETURN_KEYWORD:r Expr:e SEMICOLON
        {:
            RESULT=new KeywordExpression(r,e);
            RESULT.setLine(rleft);
            RESULT.setColumn(rright);
        :}
       |CONTINUE_KEYWORD:c SEMICOLON
        {:
            RESULT =new KeywordLiteral(c);
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
        :}
        |IDENTIFIER:id ASSIGN Expr:e SEMICOLON
            {:
                RESULT= new AssignmentStatement(id,e);
                RESULT.setLine(idleft);
                RESULT.setColumn(idright);
            :}
        // |Expr
        |VariableDefinition
        |CurlyStmt
       ;

 Expr ::= INTEGER_LITERAL:l
         {:
             RESULT = new IntegerLiteralExpression(l);
             RESULT.setLine(lleft);
             RESULT.setColumn(lright);
         :}
       | FLOAT_LITERAL:f
         {:
             RESULT = new FloatLiteralExpression(l);
             RESULT.setLine(lleft);
             RESULT.setColumn(lright);
         :}
       | STRING_LITERAL:s
         {:
             RESULT = new StringLiteralExpression(s);
             RESULT.setLine(sleft);
             RESULT.setColumn(sright);
         :}
       | CHARACTER_LITERAL:c
         {:
            RESULT= new CharacterLiteralExpression(c);
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
         :}
       | IDENTIFIER:id
         {:
             RESULT = new IdentifierExpression(id);
             RESULT.setLine(idleft);
             RESULT.setColumn(idright);
         :}
       | LPAREN  ExprList:el RPAREN
        {:
            RESULT = new ParenthesisExpression(el);
            RESULT.setLine(idleft);
            RESULT.setColumn(idright);
        :}
       |NEW_KEYWORD TypeSpecifier:t LBRAC INTEGER_LITERAL:l RBRAC
          {:
            RESULT=new NewArraySpecifier(t,l);
            RESULT.setLine(tleft);
            RESULT.setColumn(tright);
          :}
       |  LBRAC  Expr:e  RBRAC
          {:
                RESULT = new BracketExpression(id,e);
                RESULT.setLine(idleft);
                RESULT.setColumn(idright);
          :}
       | LPAREN:lp Expr:e RPAREN
         {:
             RESULT = new ParenthesisExpression(e);
             RESULT.setLine(lpleft);
             RESULT.setColumn(lpright);
         :}
       | Expr:e1 PLUS Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 MINUS Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 TIMES Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.MULTIPLY, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 DIVISION Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.DIVISION, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 MOD Expr:e2
         {: 
            RESULT = new BinaryExpression(Operator.MOD,e1,e2);
            RESULT.setLine(e1left);
            RESULT.setColumn(e1right);
         :}
       |NOT Expr:e
         {: 
            RESULT = new BinaryExpression(Operator.NOT,e);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       |Expr:e1 AND Expr:e2
        {:
             RESULT = new BinaryExpression(Operator.AND, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       |Expr:e1 OR Expr:e2
        {:
             RESULT = new BinaryExpression(Operator.OR, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}  
       | Expr:e1 EQUAL Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.EQUAL, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 NOT_EQUAL Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.NOT_EQUAL, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 LESS_THAN Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.LESS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 LESS_OR_EQUAL Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.LESS_EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 GREATER_THAN Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.GREATER, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | Expr:e1 GREATER_OR_EQUAL Expr:e2
         {:
             RESULT = new BinaryExpression(Operator.GREATER_EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         :}
       | UMINUS:m Expr:e 
         {:
             RESULT = new UnaryExpression(Operator.MINUS, e);
             RESULT.setLine(mleft);
             RESULT.setColumn(mright);
         :} 
         %prec UMINUS
       ;

 
 ExprList  ::=  Expr:e
            {:
                 RESULT = new ArrayList<Expression>();
                 RESULT.add(e);
             :}
           | ExprList:el COMA Expr:e
             {:
                 el.add(e);
                 RESULT = el;
             :}
           ;
