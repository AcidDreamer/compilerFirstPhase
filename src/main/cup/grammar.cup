/**
 *  This code is part of the lab exercises for the Compilers course
 *  at Harokopio University of Athens, Dept. of Informatics and Telematics.
 */

import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

parser code
{:
    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info){
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception{
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};

terminal java.lang.String IDENTIFIER;       // name
terminal MISSING_KEYWORD;
terminal ASSIGN,COMA,AND,OR,MOD,NOT,LBRAC,RBRAC;
terminal LPAREN, RPAREN,LCURLY,RCURLY, SEMICOLON;
terminal EQ;
terminal TIMES, DIVISION;
terminal PLUS, MINUS, UMINUS;
terminal LESS_THAN,GREATER_THAN,GREATER_OR_EQUAL,LESS_OR_EQUAL;
terminal EQUAL,NOT_EQUAL;
terminal INT_KEYWORD,FLOAT_KEYWORD,CHAR_KEYWORD,WHILE_KEYWORD,IF_KEYWORD,ELSE_KEYWORD;
terminal RETURN_KEYWORD , BREAK_KEYWORD , CONTINUE_KEYWORD , NEW_KEYWORD , DELETE_KEYWORD;
terminal VOID_KEYWORD , PRINT_KEYWORD;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Double  DOUBLE_LITERAL;
terminal java.lang.String  STRING_LITERAL;
terminal java.lang.Char    CHARACTER_LITERAL;

non terminal Expr;
non terminal Stmt;
non terminal StmtList;
non terminal CompUnit;
non terminal CompStmt;

precedence left EQUAL,NOT_EQUAL;
precedence left LESS_THAN,LESS_OR_EQUAL,GREATER_OR_EQUAL,GREATER_THAN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;
precedence right UMINUS;
precedence right EQ;
start with CompilationUnit;

<CompilationUnit> ::= (<VariableDefinition> | <FunctionDefinition>)*
<FunctionDefinition> ::= <TypeSpecifier> <Identifier> LPAREN <ParameterList>? RPAREN LCURLY <Statement>* RCURLY
<ParameterList> ::= <ParameterDeclaration>
    | <ParameterList> COMA <ParameterDeclaration>
<ParameterDeclaration> ::= <TypeSpecifier> <Identifier>
    | <TypeSpecifier> LBRAC RBRAC <Identifier>
<TypeSpecifier> ::= CHAR_KEYWORD
    | INT_KEYWORD
    | FLOAT_KEYWORD
    | VOID_KEYWORD

<VariableDefinition> ::= <TypeSpecifier> <Identifier> SEMICOLON
    | <TypeSpecifier> LBRAC RBRAC <Identifier> SEMICOLON
<Statement> ::= WHILE  LPAREN <Expr> RPAREN <Statement>
    | IF_KEYWORD <Expr> RPAREN <Statement>
    | IF_KEYWORD LPAREN <Expr> RPAREN <Statement> ELSE_KEYWORD <Statement>
    | <Expr> ASSIGN <Expr> SEMICOLON
    | <Expr> SEMICOLON
    | RETURN_KEYWORD <Expr>? SEMICOLON
    | BREAK_KEYWORD SEMICOLON
    | CONTINUE_KEYWORD SEMICOLON
    | LCURLY <Statement>* RCURLY
    | <VariableDefinition>
<Statement> ::= WHILE  LPAREN <Expr> RPAREN <Statement>
    | IF_KEYWORD <Expr> RPAREN <Statement>
    | IF_KEYWORD LPAREN <Expr> RPAREN <Statement> ELSE_KEYWORD <Statement>
    | <Expr> ASSIGN <Expr> SEMICOLON
    | <Expr> SEMICOLON
    | RETURN_KEYWORD <Expr>? SEMICOLON
    | BREAK_KEYWORD SEMICOLON
    | CONTINUE_KEYWORD SEMICOLON
    | LCURLY <Statement>* RCURLY
    | <VariableDefinition>

<Expr> ::= <IntegerLiteral>
    | <FloatLiteral>
    | <StringLiteral>
    | <CharacterLiteral>
    | <Identifier>
    | <Identifier> LPAREN <ExprList>? RPAREN
    | NEW_KEYWORD <TypeSpecifier> LBRAC IntegerLiteral RBRAC
    | <Identifier> LBRAC <Expr> RBRAC
    | LPAREN <Expr> RPAREN
    | <Expr> PLUS <Expr>
    | <Expr> MINUS <Expr>
    | <Expr> TIMES <Expr>
    | <Expr> MOD <Expr>
    | <Expr> DIVISION <Expr>
    | UMINUS <Expr>
    | <Expr> AND <Expr>
    | <Expr> OR <Expr>
    | NOT <Expr>
    | <Expr> EQUAL <Expr>
    | <Expr> NOT_EQUAL <Expr>
    | <Expr> GREATER_OR_EQUAL <Expr>
    | <Expr> GREATER_THAN <Expr>
    | <Expr> LESS_THAN <Expr>
    | <Expr> LESS_OR_EQUAL <Expr>
    <ExprList> ::= <Expr>
    | <ExprList> COMA <Expr>
