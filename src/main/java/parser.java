
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 16 18:06:47 EEST 2018
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.lang.*;
import ast.specifics.*;
import ast.interfaces.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 16 18:06:47 EEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\006\002\000\002\006" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\004\000\002\007\011\000\002\007\012\000" +
    "\002\015\003\000\002\015\005\000\002\013\004\000\002" +
    "\013\006\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\011\005" +
    "\000\002\011\007\000\002\005\003\000\002\005\004\000" +
    "\002\014\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\005\000\002\004\004\000\002\004\007\000\002\004" +
    "\011\000\002\004\003\000\002\004\004\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\006\000" +
    "\002\004\011\000\002\004\003\000\002\003\003\000\002" +
    "\003\005\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\005" +
    "\000\002\002\007\000\002\002\005\000\002\002\005\000" +
    "\002\002\006\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\016\002\000\036\012\037\014\040\013\044" +
    "\007\052\015\001\002\000\004\002\215\001\002\000\016" +
    "\002\ufffe\036\ufffe\037\ufffe\040\ufffe\044\ufffe\052\ufffe\001" +
    "\002\000\016\002\uffff\036\012\037\014\040\013\044\007" +
    "\052\015\001\002\000\006\004\ufff0\014\ufff0\001\002\000" +
    "\016\002\ufffc\036\ufffc\037\ufffc\040\ufffc\044\ufffc\052\ufffc" +
    "\001\002\000\006\004\017\014\016\001\002\000\006\004" +
    "\ufff3\014\ufff3\001\002\000\006\004\ufff4\014\ufff4\001\002" +
    "\000\006\004\ufff2\014\ufff2\001\002\000\006\004\ufff1\014" +
    "\ufff1\001\002\000\004\015\210\001\002\000\006\016\021" +
    "\022\020\001\002\000\044\002\uffef\004\uffef\014\uffef\015" +
    "\uffef\020\uffef\021\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\044\uffef\045\uffef\046\uffef\047\uffef\052\uffef\053" +
    "\uffef\001\002\000\016\017\025\036\012\037\014\040\013" +
    "\044\007\052\015\001\002\000\006\007\ufff8\017\ufff8\001" +
    "\002\000\006\004\205\014\204\001\002\000\006\007\176" +
    "\017\177\001\002\000\004\020\026\001\002\000\036\004" +
    "\027\014\037\020\032\036\012\037\014\040\013\041\033" +
    "\042\043\044\007\045\041\046\035\047\040\052\015\053" +
    "\042\001\002\000\006\006\166\014\165\001\002\000\042" +
    "\004\uffdd\014\uffdd\015\uffdd\020\uffdd\021\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\052\uffdd\053\uffdd\001\002\000\006\004\164\014" +
    "\016\001\002\000\036\004\027\014\037\020\032\036\012" +
    "\037\014\040\013\041\033\042\043\044\007\045\041\046" +
    "\035\047\040\052\015\053\042\001\002\000\004\016\156" +
    "\001\002\000\042\004\uffe4\014\uffe4\015\uffe4\020\uffe4\021" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\001\002\000" +
    "\004\022\155\001\002\000\040\004\uffed\014\uffed\020\uffed" +
    "\021\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\052\uffed\053\uffed\001\002" +
    "\000\040\004\027\014\037\015\152\020\032\036\012\037" +
    "\014\040\013\041\033\042\043\044\007\045\041\046\035" +
    "\047\040\052\015\053\042\001\002\000\004\022\151\001" +
    "\002\000\030\004\057\013\060\014\054\016\061\022\147" +
    "\027\051\050\055\054\062\055\056\056\053\057\052\001" +
    "\002\000\004\016\142\001\002\000\004\016\047\001\002" +
    "\000\040\004\027\014\037\020\032\021\045\036\012\037" +
    "\014\040\013\041\033\042\043\044\007\045\041\046\035" +
    "\047\040\052\015\053\042\001\002\000\016\002\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\044\ufffa\052\ufffa\001\002\000\040" +
    "\004\uffec\014\uffec\020\uffec\021\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\052\uffec\053\uffec\001\002\000\026\004\057\013\060\014" +
    "\054\016\061\027\051\050\055\054\062\055\056\056\053" +
    "\057\052\001\002\000\036\010\070\011\104\012\073\017" +
    "\136\023\102\024\101\025\076\026\071\030\075\031\103" +
    "\032\077\033\072\034\074\035\100\001\002\000\026\004" +
    "\057\013\060\014\054\016\061\027\051\050\055\054\062" +
    "\055\056\056\053\057\052\001\002\000\044\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\015\uffd7\017\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\001\002\000\044\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\015\uffd8\017\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\001\002\000\026\004\057\013\060\014" +
    "\054\016\061\027\051\050\055\054\062\055\056\056\053" +
    "\057\052\001\002\000\014\036\012\037\014\040\013\044" +
    "\007\052\015\001\002\000\044\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\001\002\000\046\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\015\uffd6\016\123\017\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\001\002\000\026\004\057\013\060\014\054" +
    "\016\061\027\051\050\055\054\062\055\056\056\053\057" +
    "\052\001\002\000\026\004\057\013\060\014\054\016\061" +
    "\027\051\050\055\054\062\055\056\056\053\057\052\001" +
    "\002\000\044\007\uffda\010\uffda\011\uffda\012\uffda\015\uffda" +
    "\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\001\002" +
    "\000\040\007\uffdc\010\070\011\104\012\073\017\uffdc\023" +
    "\102\024\101\025\076\026\071\030\075\031\103\032\077" +
    "\033\072\034\074\035\100\001\002\000\006\007\065\017" +
    "\066\001\002\000\026\004\057\013\060\014\054\016\061" +
    "\027\051\050\055\054\062\055\056\056\053\057\052\001" +
    "\002\000\044\007\uffd5\010\uffd5\011\uffd5\012\uffd5\015\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\001\002" +
    "\000\040\007\uffdb\010\070\011\104\012\073\017\uffdb\023" +
    "\102\024\101\025\076\026\071\030\075\031\103\032\077" +
    "\033\072\034\074\035\100\001\002\000\026\004\057\013" +
    "\060\014\054\016\061\027\051\050\055\054\062\055\056" +
    "\056\053\057\052\001\002\000\026\004\057\013\060\014" +
    "\054\016\061\027\051\050\055\054\062\055\056\056\053" +
    "\057\052\001\002\000\026\004\057\013\060\014\054\016" +
    "\061\027\051\050\055\054\062\055\056\056\053\057\052" +
    "\001\002\000\026\004\057\013\060\014\054\016\061\027" +
    "\051\050\055\054\062\055\056\056\053\057\052\001\002" +
    "\000\026\004\057\013\060\014\054\016\061\027\051\050" +
    "\055\054\062\055\056\056\053\057\052\001\002\000\026" +
    "\004\057\013\060\014\054\016\061\027\051\050\055\054" +
    "\062\055\056\056\053\057\052\001\002\000\026\004\057" +
    "\013\060\014\054\016\061\027\051\050\055\054\062\055" +
    "\056\056\053\057\052\001\002\000\026\004\057\013\060" +
    "\014\054\016\061\027\051\050\055\054\062\055\056\056" +
    "\053\057\052\001\002\000\026\004\057\013\060\014\054" +
    "\016\061\027\051\050\055\054\062\055\056\056\053\057" +
    "\052\001\002\000\026\004\057\013\060\014\054\016\061" +
    "\027\051\050\055\054\062\055\056\056\053\057\052\001" +
    "\002\000\026\004\057\013\060\014\054\016\061\027\051" +
    "\050\055\054\062\055\056\056\053\057\052\001\002\000" +
    "\026\004\057\013\060\014\054\016\061\027\051\050\055" +
    "\054\062\055\056\056\053\057\052\001\002\000\026\004" +
    "\057\013\060\014\054\016\061\027\051\050\055\054\062" +
    "\055\056\056\053\057\052\001\002\000\044\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\001\002\000\044\007\uffc4\010\070" +
    "\011\104\012\073\015\uffc4\017\uffc4\022\uffc4\023\102\024" +
    "\101\025\076\026\071\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\001\002\000\044\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\015\uffce\017\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\001\002\000\044\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\015\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\001\002\000\044\007\uffc7\010\070\011\104\012" +
    "\073\015\uffc7\017\uffc7\022\uffc7\023\102\024\101\025\076" +
    "\026\071\030\075\031\103\032\077\033\072\034\uffc7\035" +
    "\uffc7\001\002\000\044\007\uffc3\010\070\011\104\012\073" +
    "\015\uffc3\017\uffc3\022\uffc3\023\102\024\101\025\076\026" +
    "\071\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\001\002\000\044\007\uffd0\010\070\011\104\012\073\015" +
    "\uffd0\017\uffd0\022\uffd0\023\102\024\101\025\uffd0\026\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\001" +
    "\002\000\044\007\uffc6\010\070\011\104\012\073\015\uffc6" +
    "\017\uffc6\022\uffc6\023\102\024\101\025\076\026\071\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\001\002" +
    "\000\044\007\uffc8\010\070\011\104\012\073\015\uffc8\017" +
    "\uffc8\022\uffc8\023\102\024\101\025\076\026\071\030\075" +
    "\031\103\032\077\033\072\034\uffc8\035\uffc8\001\002\000" +
    "\044\007\uffcc\010\uffcc\011\uffcc\012\uffcc\015\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\001\002\000\044" +
    "\007\uffc5\010\070\011\104\012\073\015\uffc5\017\uffc5\022" +
    "\uffc5\023\102\024\101\025\076\026\071\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\001\002\000\044\007" +
    "\uffcf\010\070\011\104\012\073\015\uffcf\017\uffcf\022\uffcf" +
    "\023\102\024\101\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002\000\044\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\015\uffca\017\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\001\002\000\044\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\015\uffcb\017\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\001\002\000\030\004\057\013\060" +
    "\014\054\016\061\017\125\027\051\050\055\054\062\055" +
    "\056\056\053\057\052\001\002\000\006\007\065\017\126" +
    "\001\002\000\044\007\uffd2\010\uffd2\011\uffd2\012\uffd2\015" +
    "\uffd2\017\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\001" +
    "\002\000\044\007\uffd1\010\uffd1\011\uffd1\012\uffd1\015\uffd1" +
    "\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002" +
    "\000\004\014\130\001\002\000\004\054\131\001\002\000" +
    "\004\015\132\001\002\000\044\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\015\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\001\002\000\036\010\070\011\104\012\073\015" +
    "\134\023\102\024\101\025\076\026\071\030\075\031\103" +
    "\032\077\033\072\034\074\035\100\001\002\000\044\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\044\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\015\uffc2\017\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\001\002\000\004\020\032\001" +
    "\002\000\044\004\uffe6\014\uffe6\015\uffe6\020\uffe6\021\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\140\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\001\002" +
    "\000\004\020\032\001\002\000\042\004\uffe5\014\uffe5\015" +
    "\uffe5\020\uffe5\021\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\053" +
    "\uffe5\001\002\000\026\004\057\013\060\014\054\016\061" +
    "\027\051\050\055\054\062\055\056\056\053\057\052\001" +
    "\002\000\036\010\070\011\104\012\073\017\144\023\102" +
    "\024\101\025\076\026\071\030\075\031\103\032\077\033" +
    "\072\034\074\035\100\001\002\000\004\022\145\001\002" +
    "\000\042\004\uffea\014\uffea\015\uffea\020\uffea\021\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\052\uffea\053\uffea\001\002\000\036\010" +
    "\070\011\104\012\073\022\150\023\102\024\101\025\076" +
    "\026\071\030\075\031\103\032\077\033\072\034\074\035" +
    "\100\001\002\000\042\004\uffe1\014\uffe1\015\uffe1\020\uffe1" +
    "\021\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\052\uffe1\053\uffe1\001\002" +
    "\000\042\004\uffe2\014\uffe2\015\uffe2\020\uffe2\021\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\052\uffe2\053\uffe2\001\002\000\042\004" +
    "\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\052\uffe0\053\uffe0\001\002\000\042\004\uffe7\014\uffe7" +
    "\015\uffe7\020\uffe7\021\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\052\uffe7" +
    "\053\uffe7\001\002\000\004\015\154\001\002\000\042\004" +
    "\uffe8\014\uffe8\015\uffe8\020\uffe8\021\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\052\uffe8\053\uffe8\001\002\000\042\004\uffe3\014\uffe3" +
    "\015\uffe3\020\uffe3\021\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3" +
    "\053\uffe3\001\002\000\026\004\057\013\060\014\054\016" +
    "\061\027\051\050\055\054\062\055\056\056\053\057\052" +
    "\001\002\000\036\010\070\011\104\012\073\017\160\023" +
    "\102\024\101\025\076\026\071\030\075\031\103\032\077" +
    "\033\072\034\074\035\100\001\002\000\004\020\032\001" +
    "\002\000\042\004\uffe9\014\uffe9\015\uffe9\020\uffe9\021\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\052\uffe9\053\uffe9\001\002\000\040" +
    "\004\027\014\037\020\032\021\163\036\012\037\014\040" +
    "\013\041\033\042\043\044\007\045\041\046\035\047\040" +
    "\052\015\053\042\001\002\000\044\004\uffeb\014\uffeb\015" +
    "\uffeb\020\uffeb\021\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\004\022\020\001\002\000\026" +
    "\004\057\013\060\014\054\016\061\027\051\050\055\054" +
    "\062\055\056\056\053\057\052\001\002\000\026\004\057" +
    "\013\060\014\054\016\061\027\051\050\055\054\062\055" +
    "\056\056\053\057\052\001\002\000\036\010\070\011\104" +
    "\012\073\022\170\023\102\024\101\025\076\026\071\030" +
    "\075\031\103\032\077\033\072\034\074\035\100\001\002" +
    "\000\042\004\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\052\uffdf\053\uffdf\001\002\000\036\010" +
    "\070\011\104\012\073\015\172\023\102\024\101\025\076" +
    "\026\071\030\075\031\103\032\077\033\072\034\074\035" +
    "\100\001\002\000\004\006\173\001\002\000\026\004\057" +
    "\013\060\014\054\016\061\027\051\050\055\054\062\055" +
    "\056\056\053\057\052\001\002\000\036\010\070\011\104" +
    "\012\073\022\175\023\102\024\101\025\076\026\071\030" +
    "\075\031\103\032\077\033\072\034\074\035\100\001\002" +
    "\000\042\004\uffde\014\uffde\015\uffde\020\uffde\021\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\052\uffde\053\uffde\001\002\000\014\036" +
    "\012\037\014\040\013\044\007\052\015\001\002\000\004" +
    "\020\200\001\002\000\036\004\027\014\037\020\032\036" +
    "\012\037\014\040\013\041\033\042\043\044\007\045\041" +
    "\046\035\047\040\052\015\053\042\001\002\000\040\004" +
    "\027\014\037\020\032\021\202\036\012\037\014\040\013" +
    "\041\033\042\043\044\007\045\041\046\035\047\040\052" +
    "\015\053\042\001\002\000\016\002\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\044\ufff9\052\ufff9\001\002\000\006\007\ufff7\017" +
    "\ufff7\001\002\000\004\015\206\001\002\000\006\007\ufff6" +
    "\017\ufff6\001\002\000\004\004\207\001\002\000\006\007" +
    "\ufff5\017\ufff5\001\002\000\004\004\211\001\002\000\004" +
    "\022\212\001\002\000\044\002\uffee\004\uffee\014\uffee\015" +
    "\uffee\020\uffee\021\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\052\uffee\053" +
    "\uffee\001\002\000\016\002\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\044\ufffd\052\ufffd\001\002\000\016\002\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\044\ufffb\052\ufffb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\014\006\003\007\007\011\004\012\010\016" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\213\011\212\012\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\022" +
    "\013\021\015\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\035" +
    "\005\043\011\033\012\030\014\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\035" +
    "\005\161\011\033\012\030\014\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\152\011\033\012\030\014\027\001\001\000" +
    "\002\001\001\000\004\002\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\045\011\033\012\030\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\047\001\001\000\002\001\001\000\004\002\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\132" +
    "\001\001\000\004\012\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\121\001\001\000\006\002\062" +
    "\003\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\120\001\001\000\004\002" +
    "\117\001\001\000\004\002\116\001\001\000\004\002\115" +
    "\001\001\000\004\002\114\001\001\000\004\002\113\001" +
    "\001\000\004\002\112\001\001\000\004\002\111\001\001" +
    "\000\004\002\110\001\001\000\004\002\107\001\001\000" +
    "\004\002\106\001\001\000\004\002\105\001\001\000\004" +
    "\002\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\062\003" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\136\001\001\000\002\001" +
    "\001\000\004\014\140\001\001\000\002\001\001\000\004" +
    "\002\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\156" +
    "\001\001\000\002\001\001\000\004\014\160\001\001\000" +
    "\002\001\001\000\012\004\045\011\033\012\030\014\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\170\001\001\000\004\002\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\022\013\202\001\001\000\002\001\001\000" +
    "\014\004\035\005\200\011\033\012\030\014\027\001\001" +
    "\000\012\004\045\011\033\012\030\014\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info){
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception{
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= UMINUS Expr 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new UnaryExpression(Operator.MINUS, e);
             RESULT.setLine(mleft);
             RESULT.setColumn(mright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr GREATER_OR_EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.GREATER_EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr GREATER_THAN Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.GREATER, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr LESS_OR_EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.LESS_EQ, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr LESS_THAN Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.LESS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr NOT_EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.NOT_EQUAL, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.EQUAL, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr OR Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.OR, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr AND Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.AND, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= NOT Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new UnaryExpression(Operator.NOT,e);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr MOD Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new BinaryExpression(Operator.MOD,e1,e2);
            RESULT.setLine(e1left);
            RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr DIVISION Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.DIVISION, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr TIMES Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.MULTIPLY, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr PLUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
             RESULT.setLine(e1left);
             RESULT.setColumn(e1right);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= IDENTIFIER LPAREN ExprList RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expression> exList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new FunctionExpression(id , exList);
            RESULT.setLine(idleft);
            RESULT.setColumn(idright);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new FunctionExpression(id , null);
            RESULT.setLine(idleft);
            RESULT.setColumn(idright);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= LBRAC Expr RBRAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new BracketExpression(e);
                RESULT.setLine(eleft);
                RESULT.setColumn(eright);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= NEW_KEYWORD TypeSpecifier LBRAC INTEGER_LITERAL RBRAC 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpecifierExpression t = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=new NewArraySpecifier(t,l);
            RESULT.setLine(tleft);
            RESULT.setColumn(tright);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= LPAREN ExprList RPAREN 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expression> el = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new ParenthesisExpression(el);
            RESULT.setLine(elleft);
            RESULT.setColumn(elright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IdentifierExpression(id);
             RESULT.setLine(idleft);
             RESULT.setColumn(idright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= CHARACTER_LITERAL 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String c = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT= new CharacterLiteralExpression(c);
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new StringLiteralExpression(s);
             RESULT.setLine(sleft);
             RESULT.setColumn(sright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= FLOAT_LITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Float f = (java.lang.Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new FloatLiteralExpression(f);
             RESULT.setLine(fleft);
             RESULT.setColumn(fright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IntegerLiteralExpression(l);
             RESULT.setLine(lleft);
             RESULT.setColumn(lright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExprList ::= ExprList COMA Expr 
            {
              ArrayList<Expression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expression> el = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 el.add(e);
                 RESULT = el;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExprList ::= Expr 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new ArrayList<Expression>();
                 RESULT.add(e);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= CurlyStmt 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CurlyStatement cs = (CurlyStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = cs;
             RESULT.setLine(csleft);
             RESULT.setColumn(csright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= IDENTIFIER LBRAC Expr RBRAC ASSIGN Expr SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ie = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new AssignmentStatement(id, e,ie);
             RESULT.setLine(idleft);
             RESULT.setColumn(idright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= IDENTIFIER ASSIGN Expr SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new AssignmentStatement(id, e);
             RESULT.setLine(idleft);
             RESULT.setColumn(idright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= CONTINUE_KEYWORD SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT =new KeywordLiteral("continue");
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= RETURN_KEYWORD SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=new KeywordExpression("return",null);
            RESULT.setLine(rleft);
            RESULT.setColumn(rright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= RETURN_KEYWORD Expr SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=new KeywordExpression("return",e);
            RESULT.setLine(rleft);
            RESULT.setColumn(rright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= BREAK_KEYWORD SEMICOLON 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new KeywordLiteral("break");
            RESULT.setLine(bleft);
            RESULT.setColumn(bright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= VariableDefinition 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = vd;
            RESULT.setLine(vdleft);
            RESULT.setColumn(vdright);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= IF_KEYWORD LPAREN Expr RPAREN CurlyStmt ELSE_KEYWORD CurlyStmt 
            {
              Statement RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CurlyStatement c1 = (CurlyStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CurlyStatement c2 = (CurlyStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IfThenElseStatement(e,c1,c2);
             RESULT.setLine(ifsleft);
             RESULT.setColumn(ifsright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= IF_KEYWORD LPAREN Expr RPAREN CurlyStmt 
            {
              Statement RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CurlyStatement c = (CurlyStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new IfStatement(e,c);
             RESULT.setLine(ifsleft);
             RESULT.setColumn(ifsright);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= LBRAC RBRAC 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new CompoundStatement();
             RESULT.setLine(lbleft);
             RESULT.setColumn(lbright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= LBRAC Statement RBRAC 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement sl = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new CompoundStatement(sl);
             RESULT.setLine(lbleft);
             RESULT.setColumn(lbright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= WHILE_KEYWORD LPAREN Expr RPAREN CurlyStmt 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CurlyStatement c = (CurlyStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new WhileStatement(e,c);
            RESULT.setLine(wleft);
            RESULT.setColumn(wright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= PRINT_KEYWORD LPAREN Expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
             RESULT = new PrintStatement(e);
             RESULT.setLine(pleft);
             RESULT.setColumn(pright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CurlyStmt ::= LCURLY StmtList RCURLY 
            {
              CurlyStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = new CurlyStatement(s);
                 RESULT.setLine(sleft);
                 RESULT.setColumn(sright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CurlyStmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StmtList ::= StmtList Statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 sl.add(s);
                 RESULT = sl;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StmtList ::= Statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new ArrayList<Statement>();
                 RESULT.add(s);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableDefinition ::= TypeSpecifier LBRAC RBRAC IDENTIFIER SEMICOLON 
            {
              VariableDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new VariableDefinition(ts,iden);
        RESULT.setIsTable(true);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VariableDefinition ::= TypeSpecifier IDENTIFIER SEMICOLON 
            {
              VariableDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new VariableDefinition(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeSpecifier ::= STRING_KEYWORD 
            {
              TypeSpecifierExpression RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new TypeSpecifierExpression("String");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeSpecifier ::= VOID_KEYWORD 
            {
              TypeSpecifierExpression RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new TypeSpecifierExpression("void");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeSpecifier ::= FLOAT_KEYWORD 
            {
              TypeSpecifierExpression RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new TypeSpecifierExpression("float");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeSpecifier ::= INT_KEYWORD 
            {
              TypeSpecifierExpression RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new TypeSpecifierExpression("int");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeSpecifier ::= CHAR_KEYWORD 
            {
              TypeSpecifierExpression RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new TypeSpecifierExpression("char");
        RESULT.setLine(kwleft);
        RESULT.setColumn(kwright);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParameterDeclaration ::= TypeSpecifier LBRAC RBRAC IDENTIFIER 
            {
              ParameterDeclaration RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ParameterDeclaration(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParameterDeclaration ::= TypeSpecifier IDENTIFIER 
            {
              ParameterDeclaration RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ParameterDeclaration(ts,iden);
        RESULT.setLine(tsleft);
        RESULT.setColumn(idenright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParameterList ::= ParameterList COMA ParameterDeclaration 
            {
              List<ParameterDeclaration> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParameterDeclaration> pl = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDeclaration pd = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        pl.add(pd);
        RESULT = pl;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParameterList ::= ParameterDeclaration 
            {
              List<ParameterDeclaration> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDeclaration pd = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<ParameterDeclaration>();
        RESULT.add(pd);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionDefinition ::= TypeSpecifier IDENTIFIER LPAREN ParameterList RPAREN LCURLY StmtList RCURLY 
            {
              FunctionDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<ParameterDeclaration> pl = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunctionDefinition(ts,iden,sl,pl);
                RESULT.setLine(tsleft);
                RESULT.setColumn(slright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FunctionDefinition ::= TypeSpecifier IDENTIFIER LPAREN RPAREN LCURLY StmtList RCURLY 
            {
              FunctionDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TypeSpecifierExpression ts = (TypeSpecifierExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		java.lang.String iden = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunctionDefinition(ts,iden,sl,null);
                RESULT.setLine(tsleft);
                RESULT.setColumn(slright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunVarList ::= FunVarList FunctionDefinition 
            {
              FunVarList RESULT =null;
		int fvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunVarList fvl = (FunVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                fvl.getFunctionDefinition().add(fd);
                RESULT = fvl;
                RESULT.setLine(fvlleft);
                RESULT.setColumn(fvlright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunVarList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunVarList ::= FunctionDefinition 
            {
              FunVarList RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunVarList();
                RESULT.getFunctionDefinition().add(fd);
                RESULT.setLine(fdleft);
                RESULT.setColumn(fdright);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunVarList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunVarList ::= FunVarList VariableDefinition 
            {
              FunVarList RESULT =null;
		int fvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunVarList fvl = (FunVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                fvl.getVariableDefinition().add(vd);
                RESULT = fvl;
                RESULT.setLine(fvlleft);
                RESULT.setColumn(fvlright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunVarList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FunVarList ::= VariableDefinition 
            {
              FunVarList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new FunVarList();
                RESULT.getVariableDefinition().add(vd);
                RESULT.setLine(vdleft);
                RESULT.setColumn(vdright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunVarList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CompilationUnit ::= FunVarList 
            {
              CompUnit RESULT =null;
		int fvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunVarList fvl = (FunVarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new CompUnit(fvl);
                 RESULT.setLine(0);
                 RESULT.setColumn(0);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompilationUnit ::= 
            {
              CompUnit RESULT =null;
		
                 RESULT = new CompUnit();
                 RESULT.setLine(0);
                 RESULT.setColumn(0);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompUnit start_val = (CompUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

