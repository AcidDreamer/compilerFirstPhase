
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 20 18:57:56 EEST 2018
//----------------------------------------------------

import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 20 18:57:56 EEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\005\002\000\002\005" +
    "\003\000\002\004\003\000\002\004\004\000\002\006\004" +
    "\000\002\006\005\000\002\003\007\000\002\003\006\000" +
    "\002\003\003\000\002\003\007\000\002\003\011\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\016\002\000\004\011\005\010\016\004\017" +
    "\013\022\012\001\002\000\004\020\101\001\002\000\016" +
    "\002\uffff\004\011\005\010\016\004\017\013\022\012\001" +
    "\002\000\020\002\ufff8\004\ufff8\005\ufff8\016\ufff8\017\ufff8" +
    "\022\ufff8\023\ufff8\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\016\ufffe\017\ufffe\022\ufffe\023\ufffe\001\002\000\004" +
    "\020\075\001\002\000\004\025\072\001\002\000\016\004" +
    "\011\005\010\016\004\017\013\022\012\023\067\001\002" +
    "\000\014\004\011\005\010\016\004\017\013\022\012\001" +
    "\002\000\004\002\015\001\002\000\004\002\001\001\002" +
    "\000\004\016\017\001\002\000\004\020\020\001\002\000" +
    "\020\004\026\020\030\022\023\031\025\056\021\057\022" +
    "\060\027\001\002\000\036\021\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\001\002\000\036\021" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\001\002\000\020\004\026\020\030\022\023\031\025" +
    "\056\021\057\022\060\027\001\002\000\032\021\062\025" +
    "\036\026\044\027\042\030\037\031\032\033\034\034\045" +
    "\035\040\036\033\037\035\040\041\001\002\000\020\004" +
    "\026\020\030\022\023\031\025\056\021\057\022\060\027" +
    "\001\002\000\036\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\001\002\000\036\021\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\001" +
    "\002\000\020\004\026\020\030\022\023\031\025\056\021" +
    "\057\022\060\027\001\002\000\032\021\043\025\036\026" +
    "\044\027\042\030\037\031\032\033\034\034\045\035\040" +
    "\036\033\037\035\040\041\001\002\000\020\004\026\020" +
    "\030\022\023\031\025\056\021\057\022\060\027\001\002" +
    "\000\020\004\026\020\030\022\023\031\025\056\021\057" +
    "\022\060\027\001\002\000\020\004\026\020\030\022\023" +
    "\031\025\056\021\057\022\060\027\001\002\000\020\004" +
    "\026\020\030\022\023\031\025\056\021\057\022\060\027" +
    "\001\002\000\020\004\026\020\030\022\023\031\025\056" +
    "\021\057\022\060\027\001\002\000\020\004\026\020\030" +
    "\022\023\031\025\056\021\057\022\060\027\001\002\000" +
    "\020\004\026\020\030\022\023\031\025\056\021\057\022" +
    "\060\027\001\002\000\020\004\026\020\030\022\023\031" +
    "\025\056\021\057\022\060\027\001\002\000\020\004\026" +
    "\020\030\022\023\031\025\056\021\057\022\060\027\001" +
    "\002\000\036\021\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\001\002\000\020\004\026\020\030" +
    "\022\023\031\025\056\021\057\022\060\027\001\002\000" +
    "\020\004\026\020\030\022\023\031\025\056\021\057\022" +
    "\060\027\001\002\000\036\021\uffec\023\uffec\024\uffec\025" +
    "\036\026\044\027\042\030\037\031\032\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\001\002\000\036\021" +
    "\uffe7\023\uffe7\024\uffe7\025\036\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\001\002\000\036\021\uffe6\023\uffe6\024\uffe6\025\036" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\036\021\uffea" +
    "\023\uffea\024\uffea\025\036\026\044\027\042\030\037\031" +
    "\032\033\034\034\045\035\040\036\033\037\uffea\040\uffea" +
    "\001\002\000\036\021\uffee\023\uffee\024\uffee\025\036\026" +
    "\044\027\042\030\037\031\032\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\001\002\000\036\021\uffe9\023" +
    "\uffe9\024\uffe9\025\036\026\044\027\042\030\uffe9\031\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001" +
    "\002\000\036\021\uffe4\023\uffe4\024\uffe4\025\036\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\001\002\000\036\021\uffeb\023\uffeb" +
    "\024\uffeb\025\036\026\044\027\042\030\037\031\032\033" +
    "\034\034\045\035\040\036\033\037\uffeb\040\uffeb\001\002" +
    "\000\036\021\uffed\023\uffed\024\uffed\025\036\026\044\027" +
    "\042\030\037\031\032\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\001\002\000\036\021\uffef\023\uffef\024" +
    "\uffef\025\036\026\044\027\042\030\037\031\032\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001\002\000" +
    "\036\021\uffe8\023\uffe8\024\uffe8\025\036\026\044\027\042" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\001\002\000\036\021\uffe5\023\uffe5\024\uffe5" +
    "\025\036\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\004" +
    "\024\063\001\002\000\020\002\ufff6\004\ufff6\005\ufff6\016" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\001\002\000\032\023\065" +
    "\025\036\026\044\027\042\030\037\031\032\033\034\034" +
    "\045\035\040\036\033\037\035\040\041\001\002\000\036" +
    "\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\001\002\000\016\004\011\005\010\016\004\017" +
    "\013\022\012\023\071\001\002\000\020\002\ufffc\004\ufffc" +
    "\005\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\001\002\000" +
    "\020\002\ufffd\004\ufffd\005\ufffd\016\ufffd\017\ufffd\022\ufffd" +
    "\023\ufffd\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\016" +
    "\ufffb\017\ufffb\022\ufffb\023\ufffb\001\002\000\020\004\026" +
    "\020\030\022\023\031\025\056\021\057\022\060\027\001" +
    "\002\000\032\024\074\025\036\026\044\027\042\030\037" +
    "\031\032\033\034\034\045\035\040\036\033\037\035\040" +
    "\041\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\016\ufff9" +
    "\017\ufff9\022\ufff9\023\ufff9\001\002\000\020\004\026\020" +
    "\030\022\023\031\025\056\021\057\022\060\027\001\002" +
    "\000\032\021\077\025\036\026\044\027\042\030\037\031" +
    "\032\033\034\034\045\035\040\036\033\037\035\040\041" +
    "\001\002\000\004\024\100\001\002\000\020\002\ufffa\004" +
    "\ufffa\005\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\001\002" +
    "\000\020\004\026\020\030\022\023\031\025\056\021\057" +
    "\022\060\027\001\002\000\032\021\103\025\036\026\044" +
    "\027\042\030\037\031\032\033\034\034\045\035\040\036" +
    "\033\037\035\040\041\001\002\000\014\004\011\005\010" +
    "\016\004\017\013\022\012\001\002\000\020\002\ufff7\004" +
    "\ufff7\005\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\012\003\006\004\004\005\013\006\005\001" +
    "\001\000\002\001\001\000\006\003\067\006\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\006\004\065\006\005\001\001" +
    "\000\006\003\015\006\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\063\001\001\000\002\001\001\000\004\002\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\030\001\001\000\002\001\001\000\004\002\057\001\001" +
    "\000\004\002\056\001\001\000\004\002\055\001\001\000" +
    "\004\002\054\001\001\000\004\002\053\001\001\000\004" +
    "\002\052\001\001\000\004\002\051\001\001\000\004\002" +
    "\050\001\001\000\004\002\047\001\001\000\002\001\001" +
    "\000\004\002\046\001\001\000\004\002\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\067\006\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\101\001\001\000\002\001\001\000\006\003\103\006" +
    "\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info){
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception{
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= Expr DIVISION Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr NOT_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr EQUAL Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= Expr GREATER_THAN Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr LESS_THAN Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= Expr GREATER_OR_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= Expr LESS_OR_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= LCURLY Expr RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stmt ::= DO Stmt WHILE LPAREN Expr RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmt ::= WHILE LPAREN Expr RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= CompStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= IDENTIFIER EQ Expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= PRINT LPAREN Expr RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CompStmt ::= LCURLY StmtList RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CompStmt ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // StmtList ::= StmtList Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StmtList ::= Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CompUnit ::= StmtList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompUnit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompUnit ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompUnit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

